@use "sass:math";

@mixin hover() {
	&:focus,
	&:hover {
		@content;
	}
}

// FONT MIXINS

// Sass function and mixin to use rem units with optional pixel fallback. 
// ------------------------------------------------
// Credit to: Pierre Burel, https://github.com/pierreburel/sass-rem
// Examples:
// 		padding: rem(10px 0);
// 		font-size: rem($h3-font-size);
$rem-baseline: $base-font-size !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
	@if $separator =="comma" or $separator =="space" {
		@return append($list, null, $separator);
	}
	@if function-exists("list-separator")==true {
		@return list-separator($list);
	}

	// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
	$test-list: (
	);
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}
	@return if($test-list ==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
	font-size: math.div($zoom, 16px) * $rem-baseline;
}

@function rem-convert($to, $values...) {
	$result: ();
	$separator: rem-separator($values);
	@each $value in $values {
		@if type-of($value)=="number" and unit($value)=="rem" and $to =="px" {
			$result: append($result, math.div($value, 1rem) * $rem-baseline, $separator);
		}
		@else if type-of($value)=="number" and unit($value)=="px" and $to =="rem" {
			$result: append($result, math.div($value, $rem-baseline) * 1rem, $separator);
		}
		@else if type-of($value)=="list" {
			$value-separator: rem-separator($value);
			$value: rem-convert($to, $value...);
			$value: rem-separator($value, $value-separator);
			$result: append($result, $value, $separator);
		}
		@else {
			$result: append($result, $value, $separator);
		}
	}
	@return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
	@if $rem-px-only {
		@return rem-convert(px, $values...);
	}
	@else {
		@return rem-convert(rem, $values...);
	}
}

@mixin rem($properties, $values...) {
	@if type-of($properties)=="map" {
		@each $property in map-keys($properties) {
			@include rem($property, map-get($properties, $property));
		}
	}
	@else {
		@each $property in $properties {
			@if $rem-fallback or $rem-px-only {
				#{$property}: rem-convert(px, $values...);
			}
			@if not $rem-px-only {
				#{$property}: rem-convert(rem, $values...);
			}
		}
	}
}

@mixin placeholder {
	&.placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
}

// Form mixins
// -------------------
@mixin button-styling {
	&:not(.has-text-color) {
		color: white;
	}

	// Set default colours.
	&:not(.has-background) {
		background: var(--wp--preset--color--hartnellgardens-green-light);
	}
	border: none;
	border-radius: 5px;
	cursor: pointer;
	display: inline-block;
	font-family: var(--wp--preset--font-family--poppins);
	padding: 16px 32px;
	letter-spacing: 1px;
	box-shadow: 0 0 0 rem(43.2px) var(--wp--preset--color--hartnellgardens-green-light) inset;
	@include xl-up {
		padding: rem(15.5px) rem(38.4px) rem(13.7px) ;
	}

	&:disabled,
	&[disabled] {
		opacity: 0.6;
		box-shadow: 0 4px 4px rgba(var(--base-color-black), 0.25);
		color: rgba(var(--base-color-white), 50%);
		cursor: not-allowed;
	}

	&:hover {
		color: #ffffff;
		box-shadow: 0 0 0 rem(39px) var(--hartnellgardens-color-grey-dark) inset;
		@include sm-up {
			box-shadow: 0 0 0 rem(42px) var(--hartnellgardens-color-grey-dark) inset;
		}
		@include xl-up {
			box-shadow: 0 0 0 rem(48px) var(--hartnellgardens-color-grey-dark) inset;
		}
	}
}

@mixin form-inputs() {
	input[type="text"],
	input[type="password"],
	input[type="email"],
	input[type="url"],
	input[type="date"],
	input[type="month"],
	input[type="time"],
	input[type="datetime"],
	input[type="datetime-local"],
	input[type="week"],
	input[type="number"],
	input[type="search"],
	input[type="tel"],
	input[type="color"],
	textarea {
		@content;
	}
}

// Screen reader mixins
// -------------------
@mixin sr-only() {
	position: absolute !important;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px; // Fix for https://github.com/twbs/bootstrap/issues/25686
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
// Credit: HTML5 Boilerplate
@mixin sr-only-focusable() {
	&:active,
	&:focus {
		position: static;
		width: auto;
		height: auto;
		overflow: visible;
		clip: auto;
		white-space: normal;
	}
}

// Width and layout mixins
// -------------------------

// Column mixins
// -------------------
$grid-columns:                12 !default;
$grid-gutter-width:           30px !default;

// Row layout
@mixin make-row( $gutter-width: $grid-gutter-width ) {
	display: flex;
	flex-wrap: wrap;
	margin-right: math.div($gutter-width, -2);
	margin-left: math.div($gutter-width, -2);
}

@mixin make-col-ready( $gutter-width: $grid-gutter-width ) {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: ($gutter-width * 0.5);
	padding-left: ($gutter-width * 0.5);
}

@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage(math.div($size, $columns));
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage(math.div($size, $columns));
}

// Max widths
@mixin block-content-max-width($max-width) {	
	margin-left: auto;
	margin-right: auto;
	@if $max-width=="max" {
		max-width: $width--container--max;
	} @else if $max-width=="large" {
		max-width: $width--block--large;
	} @else if $max-width=="medium" {
		max-width: $width--block--medium;
	} @else if $max-width=="small" {
		max-width: $width--block--small;
	}
}

@mixin block-margins-top() {
	margin-top: rem($block-gap);
	@include md-up {
		margin-top: rem(calc($block-gap * 1.5));
	}
	@include lg-up {
		margin-top: rem(calc($block-gap * 2));
	}
}

@mixin block-margins-bottom() {
	margin-bottom: rem($block-gap);
	@include md-up {
		margin-bottom: rem(calc($block-gap * 1.5));
	}
	@include lg-up {
		margin-bottom: rem(calc($block-gap * 2));
	}
}

@mixin site-padding() {
	padding-left: $gutter-spacing;
	padding-right: $gutter-spacing;
	@include xxl-up() {
		padding-left: 0; 
		padding-right: 0;
	}
}

// Breakpoint mixins
// -------------------
// MIN WIDTH (up)
@mixin xss-up() {
	@media (min-width: $breakpoint--xss) {
		@content;
	}
}

@mixin xs-up() {
	@media (min-width: $breakpoint--xs) {
		@content;
	}
}

@mixin sm-up() {
	@media (min-width: $breakpoint--sm) {
		@content;
	}
}

@mixin md-up() {
	@media (min-width: $breakpoint--md) {
		@content;
	}
}

@mixin lg-up() {
	@media (min-width: $breakpoint--lg) {
		@content;
	}
}

@mixin xl-up() {
	@media (min-width: $breakpoint--xl) {
		@content;
	}
}

@mixin xxl-up() {
	@media (min-width: $breakpoint--xxl) {
		@content;
	}
}

// $mw-width: $width--block--medium + 90;
@mixin medium-width-up() {
	@media (min-width: 1000px) {
		@content;
	}
}

// MAX WIDTH (down)
@mixin xss-down() {
	@media (max-width: $breakpoint--xss--down) {
		@content;
	}
}

@mixin xs-down() {
	@media (max-width: $breakpoint--xs--down) {
		@content;
	}
}

@mixin sm-down() {
	@media (max-width: $breakpoint--sm--down) {
		@content;
	}
}

@mixin md-down() {
	@media (max-width: $breakpoint--md--down) {
		@content;
	}
}

@mixin lg-down() {
	@media (max-width: $breakpoint--lg--down) {
		@content;
	}
}

@mixin xl-down() {
	@media (max-width: $breakpoint--xl--down) {
		@content;
	}
}

@mixin xxl-down() {
	@media (max-width: $breakpoint--xxl--down) {
		@content;
	}
}